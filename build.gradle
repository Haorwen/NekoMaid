plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group 'cn.apisium.nekomaid'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility =  JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven {
        name = 'papermc'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'jitpack'
        url = 'https://www.jitpack.io'
    }
    maven {
        name = 'PlugMan'
        url = 'https://raw.githubusercontent.com/TheBlackEntity/PlugMan/repository/'
    }
}

dependencies {
    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'io.netty:netty-all:4.1.65.Final'
    compileOnly 'org.jetbrains:annotations:21.0.1'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.14.1'
    compileOnly 'com.rylinaux:PlugMan:2.2.3'
    compileOnly 'com.github.Apisium:Uniporter:1.1-SNAPSHOT'
    compileOnly 'com.github.jikoo.OpenInv:openinvapi:2f36a4d'
    compileOnly ('com.github.MilkBowl:VaultAPI:1.7') {
        exclude group: 'org.bukkit'
    }
    compileOnly ('org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT') {
        exclude group: 'org.bukkit'
    }

    implementation 'com.alibaba:fastjson:1.2.76'
    implementation 'com.github.Apisium:netty-engine.io:eadc851739'
    implementation ('io.socket:engine.io-server:5.0.0') {
        exclude group: 'com.google.code.gson'
    }
    implementation ('io.socket:socket.io-server:3.0.1') {
        exclude group: 'org.json'
        exclude group: 'com.squareup.okhttp3'
        exclude group: 'io.socket', module: 'engine.io-server'
        exclude group: 'io.socket', module: 'engine.io-client'
    }

    annotationProcessor 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'

    jar {
        from {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "GBK"
}